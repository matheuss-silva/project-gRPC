# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from generated import notifications_pb2, notifications_pb2_grpc



class NotificationsStub(object):
    """O serviço de notificações
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendNotification = channel.unary_unary(
                '/notifications.Notifications/SendNotification',
                request_serializer=notifications_pb2.Notification.SerializeToString,
                response_deserializer=notifications_pb2.MarkAsReadResponse.FromString,
                )
        self.ListNotifications = channel.unary_unary(
                '/notifications.Notifications/ListNotifications',
                request_serializer=notifications_pb2.ListNotificationsRequest.SerializeToString,
                response_deserializer=notifications_pb2.ListNotificationsResponse.FromString,
                )
        self.MarkNotificationAsRead = channel.unary_unary(
                '/notifications.Notifications/MarkNotificationAsRead',
                request_serializer=notifications_pb2.MarkAsReadRequest.SerializeToString,
                response_deserializer=notifications_pb2.MarkAsReadResponse.FromString,
                )


class NotificationsServicer(object):
    """O serviço de notificações
    """

    def SendNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListNotifications(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def MarkNotificationAsRead(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_NotificationsServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendNotification': grpc.unary_unary_rpc_method_handler(
                    servicer.SendNotification,
                    request_deserializer=notifications_pb2.Notification.FromString,
                    response_serializer=notifications_pb2.MarkAsReadResponse.SerializeToString,
            ),
            'ListNotifications': grpc.unary_unary_rpc_method_handler(
                    servicer.ListNotifications,
                    request_deserializer=notifications_pb2.ListNotificationsRequest.FromString,
                    response_serializer=notifications_pb2.ListNotificationsResponse.SerializeToString,
            ),
            'MarkNotificationAsRead': grpc.unary_unary_rpc_method_handler(
                    servicer.MarkNotificationAsRead,
                    request_deserializer=notifications_pb2.MarkAsReadRequest.FromString,
                    response_serializer=notifications_pb2.MarkAsReadResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'notifications.Notifications', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Notifications(object):
    """O serviço de notificações
    """

    @staticmethod
    def SendNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notifications.Notifications/SendNotification',
            notifications_pb2.Notification.SerializeToString,
            notifications_pb2.MarkAsReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListNotifications(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notifications.Notifications/ListNotifications',
            notifications_pb2.ListNotificationsRequest.SerializeToString,
            notifications_pb2.ListNotificationsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def MarkNotificationAsRead(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/notifications.Notifications/MarkNotificationAsRead',
            notifications_pb2.MarkAsReadRequest.SerializeToString,
            notifications_pb2.MarkAsReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
