"use strict";

var google_protobuf_timestamp_pb = _interopRequireWildcard(require("google-protobuf/google/protobuf/timestamp_pb"));
var proto = _interopRequireWildcard(require("./notifications_pb.js"));
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != _typeof(e) && "function" != typeof e) return { "default": e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n["default"] = e, t && t.set(e, n), n; }
/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: notifications.proto

/* eslint-disable */
// @ts-nocheck

var grpc = {};
grpc.web = Promise.resolve().then(function () {
  return _interopRequireWildcard(require('grpc-web'));
});
/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.NotificationsClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.NotificationsPromiseClient = function (hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Notification,
 *   !proto.MarkAsReadResponse>}
 */
var methodDescriptor_Notifications_SendNotification = new grpc.web.MethodDescriptor('/Notifications/SendNotification', grpc.web.MethodType.UNARY, proto.Notification, proto.MarkAsReadResponse,
/**
 * @param {!proto.Notification} request
 * @return {!Uint8Array}
 */
function (request) {
  return request.serializeBinary();
}, proto.MarkAsReadResponse.deserializeBinary);

/**
 * @param {!proto.Notification} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MarkAsReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MarkAsReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.sendNotification = function (request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ + '/Notifications/SendNotification', request, metadata || {}, methodDescriptor_Notifications_SendNotification, callback);
};

/**
 * @param {!proto.Notification} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MarkAsReadResponse>}
 *     Promise that resolves to the response
 */
proto.NotificationsPromiseClient.prototype.sendNotification = function (request, metadata) {
  return this.client_.unaryCall(this.hostname_ + '/Notifications/SendNotification', request, metadata || {}, methodDescriptor_Notifications_SendNotification);
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListNotificationsRequest,
 *   !proto.ListNotificationsResponse>}
 */
var methodDescriptor_Notifications_ListNotifications = new grpc.web.MethodDescriptor('/Notifications/ListNotifications', grpc.web.MethodType.UNARY, proto.ListNotificationsRequest, proto.ListNotificationsResponse,
/**
 * @param {!proto.ListNotificationsRequest} request
 * @return {!Uint8Array}
 */
function (request) {
  return request.serializeBinary();
}, proto.ListNotificationsResponse.deserializeBinary);

/**
 * @param {!proto.ListNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListNotificationsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListNotificationsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.listNotifications = function (request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ + '/Notifications/ListNotifications', request, metadata || {}, methodDescriptor_Notifications_ListNotifications, callback);
};

/**
 * @param {!proto.ListNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListNotificationsResponse>}
 *     Promise that resolves to the response
 */
proto.NotificationsPromiseClient.prototype.listNotifications = function (request, metadata) {
  return this.client_.unaryCall(this.hostname_ + '/Notifications/ListNotifications', request, metadata || {}, methodDescriptor_Notifications_ListNotifications);
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MarkAsReadRequest,
 *   !proto.MarkAsReadResponse>}
 */
var methodDescriptor_Notifications_MarkNotificationAsRead = new grpc.web.MethodDescriptor('/Notifications/MarkNotificationAsRead', grpc.web.MethodType.UNARY, proto.MarkAsReadRequest, proto.MarkAsReadResponse,
/**
 * @param {!proto.MarkAsReadRequest} request
 * @return {!Uint8Array}
 */
function (request) {
  return request.serializeBinary();
}, proto.MarkAsReadResponse.deserializeBinary);

/**
 * @param {!proto.MarkAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MarkAsReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MarkAsReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.markNotificationAsRead = function (request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ + '/Notifications/MarkNotificationAsRead', request, metadata || {}, methodDescriptor_Notifications_MarkNotificationAsRead, callback);
};

/**
 * @param {!proto.MarkAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MarkAsReadResponse>}
 *     Promise that resolves to the response
 */
proto.NotificationsPromiseClient.prototype.markNotificationAsRead = function (request, metadata) {
  return this.client_.unaryCall(this.hostname_ + '/Notifications/MarkNotificationAsRead', request, metadata || {}, methodDescriptor_Notifications_MarkNotificationAsRead);
};

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.NotificationRequest,
 *   !proto.NotificationResponse>}
 */
var methodDescriptor_Notifications_SubscribeToNotifications = new grpc.web.MethodDescriptor('/Notifications/SubscribeToNotifications', grpc.web.MethodType.SERVER_STREAMING, proto.NotificationRequest, proto.NotificationResponse,
/**
 * @param {!proto.NotificationRequest} request
 * @return {!Uint8Array}
 */
function (request) {
  return request.serializeBinary();
}, proto.NotificationResponse.deserializeBinary);

/**
 * @param {!proto.NotificationRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.NotificationResponse>}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.subscribeToNotifications = function (request, metadata) {
  return this.client_.serverStreaming(this.hostname_ + '/Notifications/SubscribeToNotifications', request, metadata || {}, methodDescriptor_Notifications_SubscribeToNotifications);
};

/**
 * @param {!proto.NotificationRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.NotificationResponse>}
 *     The XHR Node Readable Stream
 */
proto.NotificationsPromiseClient.prototype.subscribeToNotifications = function (request, metadata) {
  return this.client_.serverStreaming(this.hostname_ + '/Notifications/SubscribeToNotifications', request, metadata || {}, methodDescriptor_Notifications_SubscribeToNotifications);
};
module.exports = proto;
