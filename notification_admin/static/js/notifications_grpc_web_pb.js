/**
 * @fileoverview gRPC-Web generated client stub for 
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.26.1
// source: notifications.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = import('grpc-web');


import * as google_protobuf_timestamp_pb from 'google-protobuf/google/protobuf/timestamp_pb';
import * as proto from './notifications_pb.js';

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.NotificationsClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.NotificationsPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.Notification,
 *   !proto.MarkAsReadResponse>}
 */
const methodDescriptor_Notifications_SendNotification = new grpc.web.MethodDescriptor(
  '/Notifications/SendNotification',
  grpc.web.MethodType.UNARY,
  proto.Notification,
  proto.MarkAsReadResponse,
  /**
   * @param {!proto.Notification} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MarkAsReadResponse.deserializeBinary
);


/**
 * @param {!proto.Notification} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MarkAsReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MarkAsReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.sendNotification =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Notifications/SendNotification',
      request,
      metadata || {},
      methodDescriptor_Notifications_SendNotification,
      callback);
};


/**
 * @param {!proto.Notification} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MarkAsReadResponse>}
 *     Promise that resolves to the response
 */
proto.NotificationsPromiseClient.prototype.sendNotification =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Notifications/SendNotification',
      request,
      metadata || {},
      methodDescriptor_Notifications_SendNotification);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ListNotificationsRequest,
 *   !proto.ListNotificationsResponse>}
 */
const methodDescriptor_Notifications_ListNotifications = new grpc.web.MethodDescriptor(
  '/Notifications/ListNotifications',
  grpc.web.MethodType.UNARY,
  proto.ListNotificationsRequest,
  proto.ListNotificationsResponse,
  /**
   * @param {!proto.ListNotificationsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.ListNotificationsResponse.deserializeBinary
);


/**
 * @param {!proto.ListNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ListNotificationsResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ListNotificationsResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.listNotifications =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Notifications/ListNotifications',
      request,
      metadata || {},
      methodDescriptor_Notifications_ListNotifications,
      callback);
};


/**
 * @param {!proto.ListNotificationsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ListNotificationsResponse>}
 *     Promise that resolves to the response
 */
proto.NotificationsPromiseClient.prototype.listNotifications =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Notifications/ListNotifications',
      request,
      metadata || {},
      methodDescriptor_Notifications_ListNotifications);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.MarkAsReadRequest,
 *   !proto.MarkAsReadResponse>}
 */
const methodDescriptor_Notifications_MarkNotificationAsRead = new grpc.web.MethodDescriptor(
  '/Notifications/MarkNotificationAsRead',
  grpc.web.MethodType.UNARY,
  proto.MarkAsReadRequest,
  proto.MarkAsReadResponse,
  /**
   * @param {!proto.MarkAsReadRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.MarkAsReadResponse.deserializeBinary
);


/**
 * @param {!proto.MarkAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.MarkAsReadResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.MarkAsReadResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.markNotificationAsRead =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/Notifications/MarkNotificationAsRead',
      request,
      metadata || {},
      methodDescriptor_Notifications_MarkNotificationAsRead,
      callback);
};


/**
 * @param {!proto.MarkAsReadRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.MarkAsReadResponse>}
 *     Promise that resolves to the response
 */
proto.NotificationsPromiseClient.prototype.markNotificationAsRead =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/Notifications/MarkNotificationAsRead',
      request,
      metadata || {},
      methodDescriptor_Notifications_MarkNotificationAsRead);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.NotificationRequest,
 *   !proto.NotificationResponse>}
 */
const methodDescriptor_Notifications_SubscribeToNotifications = new grpc.web.MethodDescriptor(
  '/Notifications/SubscribeToNotifications',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.NotificationRequest,
  proto.NotificationResponse,
  /**
   * @param {!proto.NotificationRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.NotificationResponse.deserializeBinary
);


/**
 * @param {!proto.NotificationRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.NotificationResponse>}
 *     The XHR Node Readable Stream
 */
proto.NotificationsClient.prototype.subscribeToNotifications =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Notifications/SubscribeToNotifications',
      request,
      metadata || {},
      methodDescriptor_Notifications_SubscribeToNotifications);
};


/**
 * @param {!proto.NotificationRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.NotificationResponse>}
 *     The XHR Node Readable Stream
 */
proto.NotificationsPromiseClient.prototype.subscribeToNotifications =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/Notifications/SubscribeToNotifications',
      request,
      metadata || {},
      methodDescriptor_Notifications_SubscribeToNotifications);
};


module.exports = proto;

